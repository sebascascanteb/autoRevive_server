// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//models
model User {
  id           Int           @id @default(autoincrement())
  name         String
  phone        String
  email        String        @unique
  exactAddress String
  birthDate    DateTime
  password     String
  role         Role          @default(CLIENT)
  branchId     Int?
  branch       Branch?       @relation(fields: [branchId], references: [id])
  reservations Reservation[]
  invoices     Invoice[]
}

model Branch {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  phoneNumber    String
  exactAddress   String
  email          String
  users          User[]
  reservations   Reservation[]
  availabilities Availability[]
  invoices   Invoice[]
}

model Service {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  priceRate      Float
  serviceTime    Int
  warranty       Int
  serviceTypeId  Int
  serviceType    ServiceType     @relation(fields: [serviceTypeId], references: [id])
  reservations   Reservation[]
  invoiceDetails InvoiceDetail[]
}

model ServiceType {
  id       Int       @id @default(autoincrement())
  name     String
  services Service[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  price          Float
  warranty       Int
  compatibility  String
  categoryId     Int
  category       ProductCategory @relation(fields: [categoryId], references: [id])
  invoiceDetails InvoiceDetail[]
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Reservation {
  id        Int      @id @default(autoincrement())
  clientId  Int
  branchId  Int
  serviceId Int
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    Status
  client    User     @relation(fields: [clientId], references: [id])
  branch    Branch   @relation(fields: [branchId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  answer1   String
  answer2   String
  answer3   String
}

model Invoice {
  id             Int             @id @default(autoincrement())
  userId         Int
  branchId       Int
  date           DateTime
  total          Float
  user           User            @relation(fields: [userId], references: [id])
  branch         Branch          @relation(fields: [branchId], references: [id])
  invoiceDetails InvoiceDetail[]
  canceled       Canceled        @default(NO)
}

model InvoiceDetail {
  id        Int      @id @default(autoincrement())
  invoiceId Int
  serviceId Int?
  productId Int?
  date      DateTime
  quantity  Int
  subtotal  Float
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
}

model Availability {
  id           Int              @id @default(autoincrement())
  branchId     Int
  availability AvailabilityType
  startDate    DateTime
  endDate      DateTime
  description  String?
  branch       Branch           @relation(fields: [branchId], references: [id])
}

enum Role {
  CLIENT
  ADMIN
  MANAGER
}

enum Status {
  PENDING
  CONFIRMED
  RESCHEDULED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum AvailabilityType {
  SCHEDULE
  BLOCK
}

enum Canceled {
  YES
  NO
}
